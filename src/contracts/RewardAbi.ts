/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RewardAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_RATE_PER_SECOND"
      | "MAX_HASH_POWER"
      | "getGPUTime"
      | "getMiningInfo"
      | "gpuIsRegistered"
      | "mine"
      | "mineBatch"
      | "nextHalvingSupplyThreshold"
      | "owner"
      | "paused"
      | "previewReward"
      | "previewRewardBatch"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HalvingOccurred"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardClaimed"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_RATE_PER_SECOND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_HASH_POWER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGPUTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMiningInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gpuIsRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mine", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mineBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nextHalvingSupplyThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previewReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRewardBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_RATE_PER_SECOND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_HASH_POWER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGPUTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMiningInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gpuIsRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mineBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextHalvingSupplyThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRewardBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace HalvingOccurredEvent {
  export type InputTuple = [owner: AddressLike, gpuId: BigNumberish];
  export type OutputTuple = [owner: string, gpuId: bigint];
  export interface OutputObject {
    owner: string;
    gpuId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    gpuId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, gpuId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    gpuId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardAbi extends BaseContract {
  connect(runner?: ContractRunner | null): RewardAbi;
  waitForDeployment(): Promise<this>;

  interface: RewardAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_RATE_PER_SECOND: TypedContractMethod<[], [bigint], "view">;

  MAX_HASH_POWER: TypedContractMethod<[], [bigint], "view">;

  getGPUTime: TypedContractMethod<[gpuId: BigNumberish], [bigint], "view">;

  getMiningInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        baseRate: bigint;
        nextThreshold: bigint;
        currentSupply: bigint;
      }
    ],
    "view"
  >;

  gpuIsRegistered: TypedContractMethod<
    [gpuId: BigNumberish],
    [boolean],
    "view"
  >;

  mine: TypedContractMethod<[gpuID: BigNumberish], [void], "nonpayable">;

  mineBatch: TypedContractMethod<
    [gpuIDs: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  nextHalvingSupplyThreshold: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  previewReward: TypedContractMethod<[gpuID: BigNumberish], [bigint], "view">;

  previewRewardBatch: TypedContractMethod<
    [gpuIDs: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_RATE_PER_SECOND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_HASH_POWER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGPUTime"
  ): TypedContractMethod<[gpuId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMiningInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        baseRate: bigint;
        nextThreshold: bigint;
        currentSupply: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "gpuIsRegistered"
  ): TypedContractMethod<[gpuId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mine"
  ): TypedContractMethod<[gpuID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mineBatch"
  ): TypedContractMethod<[gpuIDs: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextHalvingSupplyThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "previewReward"
  ): TypedContractMethod<[gpuID: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRewardBatch"
  ): TypedContractMethod<[gpuIDs: BigNumberish[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "HalvingOccurred"
  ): TypedContractEvent<
    HalvingOccurredEvent.InputTuple,
    HalvingOccurredEvent.OutputTuple,
    HalvingOccurredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "HalvingOccurred(address,uint256)": TypedContractEvent<
      HalvingOccurredEvent.InputTuple,
      HalvingOccurredEvent.OutputTuple,
      HalvingOccurredEvent.OutputObject
    >;
    HalvingOccurred: TypedContractEvent<
      HalvingOccurredEvent.InputTuple,
      HalvingOccurredEvent.OutputTuple,
      HalvingOccurredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
